import frappe
from frappe import _
from frappe.utils import cint, flt, now

@frappe.whitelist()
def add_comment(session, video_title, timestamp, comment_text):
    """Add a new comment to a video"""
    if not frappe.session.user:
        return {"message": "Error", "error": "User not authenticated"}
    
    try:
        # Check if user is admin (by email)
        is_admin = frappe.session.user == "administrator@gmail.com"
        
        # Check if user is a doctor (by email pattern or role)
        user_roles = frappe.get_roles(frappe.session.user)
        is_physician = "Physician" in user_roles
        is_doctor_email = frappe.session.user.lower().startswith('doctor')
        
        # DEBUG: Enhanced logging
        frappe.logger().info(f"=== ADD COMMENT DEBUG ===")
        frappe.logger().info(f"User: {frappe.session.user}")
        frappe.logger().info(f"User roles: {user_roles}")
        frappe.logger().info(f"Is admin: {is_admin}")
        frappe.logger().info(f"Is physician: {is_physician}")
        frappe.logger().info(f"Is doctor email: {is_doctor_email}")
        frappe.logger().info(f"Session: {session}")
        frappe.logger().info(f"Video: {video_title}")
        frappe.logger().info(f"Comment: {comment_text[:50]}...")
        
        doctor_name = None
        
        # Determine doctor name based on user type
        if is_admin:
            # Admin users use admin fallback
            doctor_name = f"admin-{frappe.session.user}"
            frappe.logger().info(f"ADMIN PATH: Using admin fallback doctor name: {doctor_name}")
        elif is_doctor_email or is_physician:
            # For doctor emails or physician users, try to find existing Doctor record first
            doctors = []
            try:
                doctors = frappe.get_list("Doctor", filters={"user": frappe.session.user})
                frappe.logger().info(f"DOCTOR/PHYSICIAN PATH: Found {len(doctors)} Doctor records")
            except frappe.PermissionError:
                frappe.logger().info(f"DOCTOR/PHYSICIAN PATH: No permission to read Doctor records, using fallback")
            except Exception as e:
                frappe.logger().info(f"DOCTOR/PHYSICIAN PATH: Error reading Doctor records: {str(e)}, using fallback")
            if doctors:
                doctor_name = doctors[0].name
                frappe.logger().info(f"Found existing Doctor record: {doctor_name}")
            else:
                # Use email-based fallback for doctor accounts
                doctor_name = f"doctor-{frappe.session.user}"
                frappe.logger().info(f"Using doctor fallback doctor name: {doctor_name}")
        else:
            # For other users, check if they have a Doctor record
            doctors = []
            try:
                doctors = frappe.get_list("Doctor", filters={"user": frappe.session.user})
                frappe.logger().info(f"OTHER USER PATH: Found {len(doctors)} Doctor records")
            except frappe.PermissionError:
                frappe.logger().info(f"OTHER USER PATH: No permission to read Doctor records")
            except Exception as e:
                frappe.logger().info(f"OTHER USER PATH: Error reading Doctor records: {str(e)}")
            
            if doctors:
                doctor_name = doctors[0].name
                frappe.logger().info(f"Found Doctor record for regular user: {doctor_name}")
            else:
                frappe.logger().error(f"ACCESS DENIED: User {frappe.session.user} not registered as doctor/admin/physician")
                return {"message": "Error", "error": "User is not registered as a doctor, administrator, or physician"}
        
        frappe.logger().info(f"Final doctor name: {doctor_name}")
        
        # Validate timestamp is a valid number
        timestamp = flt(timestamp)
        if timestamp < 0:
            return {"message": "Error", "error": "Timestamp must be a positive number"}
        
        # Create a new comment
        frappe.logger().info(f"Creating comment with doctor: {doctor_name}")
        comment = frappe.new_doc("Video Comment")
        comment.doctor = doctor_name
        comment.session = session
        comment.video_title = video_title
        comment.timestamp = timestamp
        comment.comment_text = comment_text
        comment.created_at = now()
        comment.insert(ignore_permissions=True)
        
        frappe.logger().info(f"Comment created successfully: {comment.name}")
        
        # Convert created_at to string for proper JSON serialization
        created_at = str(comment.created_at) if comment.created_at else ""
        
        # Get doctor name for display
        user_full_name = frappe.db.get_value("User", frappe.session.user, "full_name")
        display_doctor_name = user_full_name or frappe.session.user.split('@')[0].title()
        
        if doctor_name.startswith("admin-"):
            display_doctor_name = f"Administrator ({display_doctor_name})"
        elif doctor_name.startswith("doctor-"):
            # For doctor fallback, use a clean name
            email_name = frappe.session.user.split('@')[0]
            display_doctor_name = email_name.replace('doctor', 'Dr. ').title()
        elif not doctor_name.startswith("admin-") and not doctor_name.startswith("doctor-"):
            try:
                doctor_doc = frappe.get_doc("Doctor", comment.doctor)
                doctor_name = doctor_doc.first_name or "Unknown Doctor"
                if doctor_doc.last_name:
                    doctor_name += f" {doctor_doc.last_name}"
            except:
                doctor_name = comment.doctor
        
        frappe.logger().info(f"Display doctor name: {display_doctor_name}")
        frappe.logger().info(f"=== ADD COMMENT SUCCESS ===")
        
        return {
            "message": "Success",
            "data": {
                "name": comment.name,
                "doctor": comment.doctor,
                "doctor_name": display_doctor_name,
                "session": comment.session,
                "video_title": comment.video_title,
                "timestamp": comment.timestamp,
                "comment_text": comment.comment_text,
                "created_at": created_at
            }
        }
        
    except Exception as e:
        frappe.logger().error(f"=== ADD COMMENT ERROR ===")
        frappe.logger().error(f"Error: {str(e)}")
        frappe.logger().error(f"User: {frappe.session.user}")
        frappe.log_error(f"Error adding comment: {str(e)}")
        return {"message": "Error", "error": str(e)}

@frappe.whitelist()
def get_comments_by_video(session, video_title):
    """Get all comments for a specific video, filtered by user email"""
    try:
        user_email = frappe.session.user
        is_admin = user_email == "administrator@gmail.com"
        frappe.logger().info(f"=== GET COMMENTS SIMPLE ===")
        frappe.logger().info(f"User: {user_email}")
        frappe.logger().info(f"Is admin: {is_admin}")
        frappe.logger().info(f"Session: {session}")
        frappe.logger().info(f"Video: {video_title}")

        if is_admin:
            # Admin can see all comments
            comments = frappe.get_all(
                "Video Comment",
                filters={
                    "session": session,
                    "video_title": video_title
                },
                fields=["name", "doctor", "comment_text", "timestamp", "creation", "modified"],
                order_by="timestamp asc"
            )
        else:
            # Only show comments for this doctor user
            possible_doctor_names = []
            # Try to get Doctor record for this user
            try:
                doctors = frappe.get_list("Doctor", filters={"user": user_email})
                if doctors:
                    possible_doctor_names.append(doctors[0].name)
            except Exception:
                pass
            # Always add fallback
            possible_doctor_names.append(f"doctor-{user_email}")
            frappe.logger().info(f"Possible doctor names for user: {possible_doctor_names}")
            comments = frappe.get_all(
                "Video Comment",
                filters={
                    "session": session,
                    "video_title": video_title,
                    "doctor": ["in", possible_doctor_names]
                },
                fields=["name", "doctor", "comment_text", "timestamp", "creation", "modified"],
                order_by="timestamp asc"
            )
        
        # Process comments to add doctor names
        processed_comments = []
        frappe.logger().info(f"Processing {len(comments)} comments for display...")
        
        for comment in comments:
            try:
                # Get doctor name for display
                doctor_name = "Unknown Doctor"
                if comment.doctor.startswith("admin-"):
                    # Admin fallback comment
                    email = comment.doctor.replace("admin-", "")
                    if email == "administrator@gmail.com":
                        doctor_name = "Administrator"
                    else:
                        doctor_name = f"Administrator ({email})"
                elif comment.doctor.startswith("doctor-"):
                    # Doctor fallback comment
                    email = comment.doctor.replace("doctor-", "")
                    email_name = email.split('@')[0]
                    doctor_name = email_name.replace('doctor', 'Dr. ').title()
                else:
                    # Regular doctor comment
                    try:
                        doctor_doc = frappe.get_doc("Doctor", comment.doctor)
                        doctor_name = doctor_doc.first_name or "Unknown Doctor"
                        if doctor_doc.last_name:
                            doctor_name += f" {doctor_doc.last_name}"
                    except Exception:
                        doctor_name = comment.doctor
                frappe.logger().info(f"  - Processed comment {comment.name}: display_name={doctor_name}")
                processed_comments.append({
                    "name": comment.name,
                    "doctor": comment.doctor,
                    "doctor_name": doctor_name,
                    "comment_text": comment.comment_text,
                    "timestamp": comment.timestamp,
                    "creation": comment.creation,
                    "modified": comment.modified
                })
            except Exception as e:
                frappe.logger().error(f"Error processing comment {comment.name}: {str(e)}")
                continue
        
        frappe.logger().info(f"=== GET COMMENTS SUCCESS: Returning {len(processed_comments)} comments ===")
        return processed_comments
        
    except Exception as e:
        frappe.logger().error(f"=== GET COMMENTS ERROR ===")
        frappe.logger().error(f"Error: {str(e)}")
        frappe.logger().error(f"User: {frappe.session.user}")
        frappe.log_error(f"Error fetching comments: {str(e)}")
        return []

@frappe.whitelist()
def delete_comment(comment_name):
    """Delete a comment with personalized permissions"""
    try:
        # Check if user is authenticated
        if not frappe.session.user:
            return {"message": "Error", "error": "User not authenticated"}
        
        # Get the comment document
        comment = frappe.get_doc("Video Comment", comment_name)
        
        # Check user permissions
        is_admin = frappe.session.user == "administrator@gmail.com"  # Check by email instead of role
        
        # Debug logging
        frappe.logger().info(f"Delete comment attempt: user={frappe.session.user}, is_admin={is_admin}, comment.doctor={comment.doctor}")
        
        if is_admin:
            # Admin can delete ANY comment
            frappe.logger().info("Admin user - permission granted for any comment")
            comment.delete(ignore_permissions=True)
            frappe.db.commit()
            
            return {
                "message": "Success",
                "data": {
                    "deleted": True,
                    "comment_name": comment_name
                }
            }
        else:
            # Regular users can only delete their own comments
            # Determine possible doctor names for current user
            possible_doctor_names = []
            
            # Check for actual Doctor record
            try:
                doctors = frappe.get_list("Doctor", filters={"user": frappe.session.user})
                if doctors:
                    possible_doctor_names.append(doctors[0].name)
            except frappe.PermissionError:
                frappe.logger().info(f"No permission to read Doctor records, using fallback only")
            except Exception as e:
                frappe.logger().info(f"Error reading Doctor records: {str(e)}, using fallback only")
            
            # Add email-based fallbacks
            possible_doctor_names.append(f"admin-{frappe.session.user}")  # Admin fallback
            possible_doctor_names.append(f"doctor-{frappe.session.user}")  # Doctor fallback
            
            # Check if this is user's own comment
            is_own_comment = comment.doctor in possible_doctor_names
            
            frappe.logger().info(f"Delete permission check: possible_doctors={possible_doctor_names}, comment.doctor={comment.doctor}, is_own={is_own_comment}")
            
            if is_own_comment:
                comment.delete(ignore_permissions=True)
                frappe.db.commit()
                
                return {
                    "message": "Success",
                    "data": {
                        "deleted": True,
                        "comment_name": comment_name
                    }
                }
            else:
                frappe.logger().info(f"Permission denied: user {frappe.session.user} cannot delete comment from doctor {comment.doctor}")
                return {"message": "Error", "error": "You don't have permission to delete this comment"}
        
    except frappe.DoesNotExistError:
        return {"message": "Error", "error": "Comment not found"}
    except Exception as e:
        frappe.log_error(f"Error deleting comment: {str(e)}")
        return {"message": "Error", "error": str(e)}

@frappe.whitelist()
def update_comment(comment_name, comment_text):
    """Update a comment with personalized permissions"""
    try:
        # Check if user is authenticated
        if not frappe.session.user:
            return {"message": "Error", "error": "User not authenticated"}
        
        # Get the comment document
        comment = frappe.get_doc("Video Comment", comment_name)
        
        # Check user permissions
        is_admin = frappe.session.user == "administrator@gmail.com"  # Check by email instead of role
        
        # Debug logging
        frappe.logger().info(f"Update comment attempt: user={frappe.session.user}, is_admin={is_admin}, comment.doctor={comment.doctor}")
        
        if is_admin:
            # Admin can edit ANY comment
            frappe.logger().info("Admin user - permission granted for any comment")
            comment.comment_text = comment_text
            comment.save()
            frappe.db.commit()
            
            return {
                "message": "Success",
                "data": {
                    "updated": True,
                    "comment_name": comment_name,
                    "comment_text": comment_text
                }
            }
        else:
            # Regular users can only edit their own comments
            # Determine possible doctor names for current user
            possible_doctor_names = []
            
            # Check for actual Doctor record
            try:
                doctors = frappe.get_list("Doctor", filters={"user": frappe.session.user})
                if doctors:
                    possible_doctor_names.append(doctors[0].name)
            except frappe.PermissionError:
                frappe.logger().info(f"No permission to read Doctor records, using fallback only")
            except Exception as e:
                frappe.logger().info(f"Error reading Doctor records: {str(e)}, using fallback only")
            
            # Add email-based fallbacks
            possible_doctor_names.append(f"admin-{frappe.session.user}")  # Admin fallback
            possible_doctor_names.append(f"doctor-{frappe.session.user}")  # Doctor fallback
            
            # Check if this is user's own comment
            is_own_comment = comment.doctor in possible_doctor_names
            
            frappe.logger().info(f"Update permission check: possible_doctors={possible_doctor_names}, comment.doctor={comment.doctor}, is_own={is_own_comment}")
            
            if is_own_comment:
                comment.comment_text = comment_text
                comment.save()
                frappe.db.commit()
                
                return {
                    "message": "Success",
                    "data": {
                        "updated": True,
                        "comment_name": comment_name,
                        "comment_text": comment_text
                    }
                }
            else:
                frappe.logger().info(f"Permission denied: user {frappe.session.user} cannot edit comment from doctor {comment.doctor}")
                return {"message": "Error", "error": "You don't have permission to update this comment"}
        
    except frappe.DoesNotExistError:
        return {"message": "Error", "error": "Comment not found"}
    except Exception as e:
        frappe.log_error(f"Error updating comment: {str(e)}")
        return {"message": "Error", "error": str(e)}

@frappe.whitelist()
def can_edit_comment(comment_name):
    """Check if current user can edit a specific comment with personalized permissions"""
    if not frappe.session.user:
        return {"message": "Error", "error": "User not authenticated"}
    
    try:
        # Get the comment document
        comment = frappe.get_doc("Video Comment", comment_name)
        
        # Check user permissions
        is_admin = frappe.session.user == "administrator@gmail.com"  # Check by email instead of role
        
        # Debug logging
        frappe.logger().info(f"Can edit check: user={frappe.session.user}, is_admin={is_admin}, comment.doctor={comment.doctor}")
        
        if is_admin:
            # Admin can edit ANY comment
            frappe.logger().info("Admin user - edit permission granted for any comment")
            return {
                "message": "Success",
                "data": {
                    "can_edit": True,
                    "is_admin": True,
                    "is_own_comment": False
                }
            }
        else:
            # Regular users can only edit their own comments
            # Determine possible doctor names for current user
            possible_doctor_names = []
            
            # Check for actual Doctor record
            try:
                doctors = frappe.get_list("Doctor", filters={"user": frappe.session.user})
                if doctors:
                    possible_doctor_names.append(doctors[0].name)
            except frappe.PermissionError:
                frappe.logger().info(f"No permission to read Doctor records, using fallback only")
            except Exception as e:
                frappe.logger().info(f"Error reading Doctor records: {str(e)}, using fallback only")
            
            # Add email-based fallbacks
            possible_doctor_names.append(f"admin-{frappe.session.user}")  # Admin fallback
            possible_doctor_names.append(f"doctor-{frappe.session.user}")  # Doctor fallback
            
            # Check if this is user's own comment
            is_own_comment = comment.doctor in possible_doctor_names
            
            frappe.logger().info(f"Edit permission check: possible_doctors={possible_doctor_names}, comment.doctor={comment.doctor}, is_own={is_own_comment}")
        
        return {
            "message": "Success",
            "data": {
                    "can_edit": is_own_comment,
                    "is_admin": False,
                    "is_own_comment": is_own_comment
            }
        }
        
    except frappe.DoesNotExistError:
        return {"message": "Error", "error": "Comment not found"}
    except Exception as e:
        frappe.log_error(f"Error checking edit permission: {str(e)}")
        return {"message": "Error", "error": str(e)}

@frappe.whitelist()
def can_delete_comment(comment_name):
    """Check if current user can delete a specific comment with personalized permissions"""
    if not frappe.session.user:
        return {"message": "Error", "error": "User not authenticated"}
    
    try:
        # Get the comment document
        comment = frappe.get_doc("Video Comment", comment_name)
        
        # Check user permissions
        is_admin = frappe.session.user == "administrator@gmail.com"  # Check by email instead of role
        
        # Debug logging
        frappe.logger().info(f"Can delete check: user={frappe.session.user}, is_admin={is_admin}, comment.doctor={comment.doctor}")
        
        if is_admin:
            # Admin can delete ANY comment
            frappe.logger().info("Admin user - delete permission granted for any comment")
            return {
                "message": "Success",
                "data": {
                    "can_delete": True,
                    "is_admin": True,
                    "is_own_comment": False
                }
            }
        else:
            # Regular users can only delete their own comments
            # Determine possible doctor names for current user
            possible_doctor_names = []
            
            # Check for actual Doctor record
            try:
                doctors = frappe.get_list("Doctor", filters={"user": frappe.session.user})
                if doctors:
                    possible_doctor_names.append(doctors[0].name)
            except frappe.PermissionError:
                frappe.logger().info(f"No permission to read Doctor records, using fallback only")
            except Exception as e:
                frappe.logger().info(f"Error reading Doctor records: {str(e)}, using fallback only")
            
            # Add email-based fallbacks
            possible_doctor_names.append(f"admin-{frappe.session.user}")  # Admin fallback
            possible_doctor_names.append(f"doctor-{frappe.session.user}")  # Doctor fallback
            
            # Check if this is user's own comment
            is_own_comment = comment.doctor in possible_doctor_names
            
            frappe.logger().info(f"Delete permission check: possible_doctors={possible_doctor_names}, comment.doctor={comment.doctor}, is_own={is_own_comment}")
        
        return {
            "message": "Success",
            "data": {
                    "can_delete": is_own_comment,
                    "is_admin": False,
                    "is_own_comment": is_own_comment
            }
        }
        
    except frappe.DoesNotExistError:
        return {"message": "Error", "error": "Comment not found"}
    except Exception as e:
        frappe.log_error(f"Error checking delete permission: {str(e)}")
        return {"message": "Error", "error": str(e)}

# Custom Template Management

@frappe.whitelist()
def get_custom_templates():
    """Get all custom comment templates for the current user"""
    try:
        # Check if user is authenticated
        if not frappe.session.user or frappe.session.user == "Guest":
            return []
        
        templates = frappe.get_all(
            "Comment Template",
            filters={"owner": frappe.session.user},
            fields=["name", "title", "content", "color", "emoji", "creation", "modified"],
            order_by="creation desc"
        )
        return templates
    except Exception as e:
        frappe.log_error(f"Error getting custom templates: {str(e)}")
        return []

@frappe.whitelist()
def create_custom_template(title, content, color="blue", emoji="💬"):
    """Create a new custom comment template"""
    try:
        # Check if user is authenticated
        if not frappe.session.user or frappe.session.user == "Guest":
            frappe.throw(_("Authentication required"))
        
        template = frappe.get_doc({
            "doctype": "Comment Template",
            "title": title,
            "content": content,
            "color": color,
            "emoji": emoji,
            "owner": frappe.session.user
        })
        template.insert()
        
        return {
            "name": template.name,
            "title": template.title,
            "content": template.content,
            "color": template.color,
            "emoji": template.emoji,
            "created": str(template.creation),
            "modified": str(template.modified)
        }
    except Exception as e:
        frappe.log_error(f"Error creating custom template: {str(e)}")
        frappe.throw(_("Failed to create template"))

@frappe.whitelist()
def update_custom_template(template_name, title, content, color="blue", emoji="💬"):
    """Update a custom comment template"""
    try:
        template = frappe.get_doc("Comment Template", template_name)
        
        # Check permissions
        if template.owner != frappe.session.user and not frappe.session.user == "administrator@gmail.com":
            frappe.throw(_("You can only edit your own templates"))
        
        template.title = title
        template.content = content
        template.color = color
        template.emoji = emoji
        template.save()
        
        return {
            "name": template.name,
            "title": template.title,
            "content": template.content,
            "color": template.color,
            "emoji": template.emoji,
            "created": str(template.creation),
            "modified": str(template.modified)
        }
    except Exception as e:
        frappe.log_error(f"Error updating custom template: {str(e)}")
        frappe.throw(_("Failed to update template"))

@frappe.whitelist()
def delete_custom_template(template_name):
    """Delete a custom comment template"""
    try:
        template = frappe.get_doc("Comment Template", template_name)
        
        # Check permissions
        if template.owner != frappe.session.user and not frappe.session.user == "administrator@gmail.com":
            frappe.throw(_("You can only delete your own templates"))
        
        template.delete()
        return {"success": True}
    except Exception as e:
        frappe.log_error(f"Error deleting custom template: {str(e)}")
        frappe.throw(_("Failed to delete template"))

@frappe.whitelist()
def test_admin_check():
    """Test endpoint to verify admin user detection"""
    try:
        user_roles = frappe.get_roles(frappe.session.user)
        is_admin = frappe.session.user == "administrator@gmail.com"  # Check by email instead of role
        
        return {
            "message": "Success",
            "data": {
                "user": frappe.session.user,
                "roles": user_roles,
                "is_admin": is_admin
            }
        }
    except Exception as e:
        return {"message": "Error", "error": str(e)}

@frappe.whitelist()
def test_doctor_detection():
    """Test endpoint to verify doctor account detection"""
    try:
        user_roles = frappe.get_roles(frappe.session.user)
        is_admin = frappe.session.user == "administrator@gmail.com"
        is_physician = "Physician" in user_roles
        is_doctor_email = frappe.session.user.lower().startswith('doctor')
        
        # Determine possible doctor names for current user
        possible_doctor_names = []
        
        # Check for actual Doctor record
        doctors = []
        try:
            doctors = frappe.get_list("Doctor", filters={"user": frappe.session.user})
            if doctors:
                possible_doctor_names.append(doctors[0].name)
        except frappe.PermissionError:
            pass  # No permission to read Doctor records
        except Exception:
            pass  # Other error reading Doctor records
        
        # Add email-based fallbacks
        possible_doctor_names.append(f"admin-{frappe.session.user}")  # Admin fallback
        possible_doctor_names.append(f"doctor-{frappe.session.user}")  # Doctor fallback
        
        return {
            "message": "Success",
            "data": {
                "user": frappe.session.user,
                "roles": user_roles,
                "is_admin": is_admin,
                "is_physician": is_physician,
                "is_doctor_email": is_doctor_email,
                "possible_doctor_names": possible_doctor_names,
                "can_add_comments": is_admin or is_doctor_email or is_physician or len(doctors) > 0
            }
        }
    except Exception as e:
        return {"message": "Error", "error": str(e)} 